##API CALL ON GEMINI-2.0-flash

import json
import requests
from helper_functions import read_entire_file, clear_file, prompt_generator

def gemini_api_call(abac_rules_generated, acl_file, attribute_data_file, attribute_description_file):
    #Parameters
        #llm_abac_rules_generated: the file where you want to save the llm generated abac rules to
        # acl_file: the acl file to feed to the LLM
        # attribute_data_file: file with all user and resource information
        # attribute_description_file the description of the attributes listed above.



    clear_file(abac_rules_generated)

    key_file ="llm-research/keys/geminiKey.txt"
    
    print("\nCalling gemini API...\n")

    try:
        gemini_key = read_entire_file(key_file)

    except FileNotFoundError as e:
        print(f"Error reading file: {e}")
        return
    except Exception as e:
        print(f"Unexpected read error: {e}")
        return
    
    complete_request_file = "llm-research/complete-prompt.txt"
                                    


    prompt_generator(acl_file, attribute_data_file, attribute_description_file, complete_request_file)

    complete_request = read_entire_file("llm-research/complete-prompt.txt")

    # send to Gemini 
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    headers = {"Content-Type": "application/json", "X-goog-api-key": gemini_key}
    data = {
        "contents": [
            {
                "parts": [
                    {"text": complete_request}
                ]
            }
        ]
    }

    try:
        resp = requests.post(url, headers=headers, json=data)
        resp.raise_for_status()
    except requests.exceptions.Timeout:
        print("HTTP error: request timed out")
        return
    except requests.exceptions.RequestException as e:
        print(f"HTTP error: {e}")
        return

    try:
        payload = resp.json()
    except json.JSONDecodeError:
        print("Response was not valid JSON.")
        return


    text = (
        payload.get("candidates", [{}])[0]
            .get("content", {})
            .get("parts", [{}])[0]
            .get("text", "")
    )

    #output the abac rules to a file for testing
    with open(abac_rules_generated, "w", encoding="utf-8") as of:
        of.write(text)
 

if __name__ == "__main__":
    gemini_api_call()
    print ("api call finalized")


##CURRENT ISSUE:M ACL NOT BEING GENERATED BY LLM REQUEST